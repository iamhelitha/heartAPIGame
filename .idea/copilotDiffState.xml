<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/helitha/heartapigame/services/FirebaseService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/helitha/heartapigame/services/FirebaseService.java" />
              <option name="originalContent" value="package org.helitha.heartapigame.services;&#10;&#10;import com.google.auth.oauth2.GoogleCredentials;&#10;import com.google.cloud.firestore.Firestore;&#10;import com.google.cloud.firestore.Query;&#10;import com.google.cloud.firestore.QueryDocumentSnapshot;&#10;import com.google.firebase.FirebaseApp;&#10;import com.google.firebase.FirebaseOptions;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseAuthException;&#10;import com.google.firebase.auth.UserRecord;&#10;import com.google.firebase.cloud.FirestoreClient;&#10;import org.helitha.heartapigame.models.LeaderboardEntry;&#10;&#10;import java.io.FileInputStream;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.concurrent.ExecutionException;&#10;&#10;/**&#10; * FirebaseService - Handles Firebase Authentication and Firestore database operations&#10; *&#10; * INTEROPERABILITY:&#10; * This class demonstrates interoperability with Google's Firebase cloud services:&#10; * - Firebase Authentication: User registration and login via Google's authentication service&#10; * - Cloud Firestore: NoSQL database for storing leaderboard data&#10; * - Communication happens over HTTPS using Firebase Admin SDK&#10; *&#10; * VIRTUAL IDENTITY:&#10; * Users establish a virtual identity by:&#10; * - Registering with email, password, and display name&#10; * - Firebase assigns a unique UID (User ID) to each user&#10; * - This identity is used to personalize the experience and track scores&#10; * - Guest users get a temporary identity (e.g., &quot;Guest4721&quot;)&#10; *&#10; * HIGH COHESION:&#10; * All Firebase-related operations (auth + database) are in this class&#10; * Single responsibility: Manage user identity and persistent data storage&#10; *&#10; * LOW COUPLING:&#10; * Controllers don't need to know Firebase implementation details&#10; * They just call methods like registerUser(), saveScore(), getTopScores()&#10; */&#10;public class FirebaseService {&#10;&#10;    private static FirebaseService instance;&#10;    private FirebaseAuth firebaseAuth;&#10;    private Firestore firestore;&#10;&#10;    private FirebaseService() {&#10;        // Private constructor for singleton&#10;    }&#10;&#10;    public static FirebaseService getInstance() {&#10;        if (instance == null) {&#10;            instance = new FirebaseService();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Initialize Firebase Admin SDK with service account key&#10;     */&#10;    public void initialize() {&#10;        try {&#10;            // Try to load service account key from resources or file system&#10;            InputStream serviceAccount = getClass().getResourceAsStream(&quot;/org/helitha/heartapigame/heartapigame-firebase-adminsdk-fbsvc-85e95dd22c.json&quot;);&#10;&#10;            // If not found in resources, try from file system&#10;            if (serviceAccount == null) {&#10;                serviceAccount = new FileInputStream(&quot;src/main/resources/org/helitha/heartapigame/heartapigame-firebase-adminsdk-fbsvc-85e95dd22c.json&quot;);&#10;            }&#10;&#10;            FirebaseOptions options = FirebaseOptions.builder()&#10;                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))&#10;                    .build();&#10;&#10;            // Initialize Firebase App if not already initialized&#10;            if (FirebaseApp.getApps().isEmpty()) {&#10;                FirebaseApp.initializeApp(options);&#10;            }&#10;&#10;            firebaseAuth = FirebaseAuth.getInstance();&#10;            firestore = FirestoreClient.getFirestore();&#10;            System.out.println(&quot;Firebase initialized successfully&quot;);&#10;&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Error initializing Firebase: &quot; + e.getMessage());&#10;            System.err.println(&quot;Stack trace: &quot; + e.getClass().getName());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Register a new user with Firebase Authentication&#10;     *&#10;     * VIRTUAL IDENTITY:&#10;     * Creates a new virtual identity for the user with:&#10;     * - Unique UID assigned by Firebase&#10;     * - Email and password for authentication&#10;     * - Display name for personalization&#10;     *&#10;     * INTEROPERABILITY:&#10;     * Communicates with Google's Firebase Authentication service over HTTPS&#10;     */&#10;    public UserRecord registerUser(String email, String password, String displayName) {&#10;        if (firebaseAuth == null) {&#10;            System.err.println(&quot;Firebase not initialized&quot;);&#10;            return null;&#10;        }&#10;&#10;        try {&#10;            UserRecord.CreateRequest request = new UserRecord.CreateRequest()&#10;                    .setEmail(email)&#10;                    .setPassword(password)&#10;                    .setDisplayName(displayName)&#10;                    .setEmailVerified(false);&#10;&#10;            UserRecord userRecord = firebaseAuth.createUser(request);&#10;            System.out.println(&quot;Successfully created user: &quot; + userRecord.getUid());&#10;            return userRecord;&#10;&#10;        } catch (FirebaseAuthException e) {&#10;            System.err.println(&quot;Error creating user: &quot; + e.getMessage());&#10;            System.err.println(&quot;Error code: &quot; + e.getAuthErrorCode());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Login user by verifying credentials&#10;     *&#10;     * VIRTUAL IDENTITY:&#10;     * Retrieves the user's virtual identity from Firebase&#10;     */&#10;    public UserRecord loginUser(String email, String password) {&#10;        if (firebaseAuth == null) {&#10;            System.err.println(&quot;Firebase not initialized&quot;);&#10;            return null;&#10;        }&#10;&#10;        try {&#10;            // Get user by email&#10;            UserRecord userRecord = firebaseAuth.getUserByEmail(email);&#10;&#10;            // Note: Firebase Admin SDK doesn't verify passwords directly&#10;            // In production, you would use Firebase Client SDK for authentication&#10;            System.out.println(&quot;User found: &quot; + userRecord.getUid());&#10;            return userRecord;&#10;&#10;        } catch (FirebaseAuthException e) {&#10;            System.err.println(&quot;Error logging in user: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get user by UID&#10;     */&#10;    public UserRecord getUserById(String uid) {&#10;        if (firebaseAuth == null) {&#10;            System.err.println(&quot;Firebase not initialized&quot;);&#10;            return null;&#10;        }&#10;&#10;        try {&#10;            return firebaseAuth.getUser(uid);&#10;        } catch (FirebaseAuthException e) {&#10;            System.err.println(&quot;Error getting user: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Save score to Firestore leaderboard collection&#10;     *&#10;     * INTEROPERABILITY:&#10;     * Stores data in Google's Cloud Firestore (NoSQL database)&#10;     * Data is synchronized across all clients in real-time&#10;     *&#10;     * VIRTUAL IDENTITY:&#10;     * Associates the score with the player's display name (virtual identity)&#10;     */&#10;    public void saveScore(String username, int score) {&#10;        if (firestore == null) {&#10;            System.err.println(&quot;Firestore not initialized&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            Map&lt;String, Object&gt; scoreData = new HashMap&lt;&gt;();&#10;            scoreData.put(&quot;username&quot;, username);&#10;            scoreData.put(&quot;score&quot;, score);&#10;            scoreData.put(&quot;timestamp&quot;, System.currentTimeMillis());&#10;&#10;            // Add document to leaderboard collection&#10;            firestore.collection(&quot;leaderboard&quot;)&#10;                    .add(scoreData)&#10;                    .get(); // Wait for completion&#10;&#10;            System.out.println(&quot;Score saved successfully: &quot; + username + &quot; - &quot; + score);&#10;&#10;        } catch (InterruptedException | ExecutionException e) {&#10;            System.err.println(&quot;Error saving score: &quot; + e.getMessage());&#10;            System.err.println(&quot;Error type: &quot; + e.getClass().getSimpleName());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get top 10 scores from leaderboard, ordered by score descending&#10;     *&#10;     * INTEROPERABILITY:&#10;     * Queries Cloud Firestore database and retrieves data&#10;     */&#10;    public List&lt;LeaderboardEntry&gt; getTopScores() {&#10;        List&lt;LeaderboardEntry&gt; topScores = new ArrayList&lt;&gt;();&#10;&#10;        if (firestore == null) {&#10;            System.err.println(&quot;Firestore not initialized&quot;);&#10;            return topScores;&#10;        }&#10;&#10;        try {&#10;            // Query leaderboard collection, order by score descending, limit to 10&#10;            List&lt;QueryDocumentSnapshot&gt; documents = firestore.collection(&quot;leaderboard&quot;)&#10;                    .orderBy(&quot;score&quot;, Query.Direction.DESCENDING)&#10;                    .limit(10)&#10;                    .get()&#10;                    .get()&#10;                    .getDocuments();&#10;&#10;            // Convert documents to LeaderboardEntry objects&#10;            for (QueryDocumentSnapshot document : documents) {&#10;                String username = document.getString(&quot;username&quot;);&#10;                Long scoreLong = document.getLong(&quot;score&quot;);&#10;                int score = scoreLong != null ? scoreLong.intValue() : 0;&#10;&#10;                topScores.add(new LeaderboardEntry(username, score));&#10;            }&#10;&#10;            System.out.println(&quot;Retrieved &quot; + topScores.size() + &quot; top scores&quot;);&#10;&#10;        } catch (InterruptedException | ExecutionException e) {&#10;            System.err.println(&quot;Error retrieving top scores: &quot; + e.getMessage());&#10;            System.err.println(&quot;Error type: &quot; + e.getClass().getSimpleName());&#10;        }&#10;&#10;        return topScores;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.helitha.heartapigame.services;&#10;&#10;import com.google.auth.oauth2.GoogleCredentials;&#10;import com.google.cloud.firestore.Firestore;&#10;import com.google.cloud.firestore.Query;&#10;import com.google.cloud.firestore.QueryDocumentSnapshot;&#10;import com.google.firebase.FirebaseApp;&#10;import com.google.firebase.FirebaseOptions;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseAuthException;&#10;import com.google.firebase.auth.UserRecord;&#10;import com.google.firebase.cloud.FirestoreClient;&#10;import org.helitha.heartapigame.models.LeaderboardEntry;&#10;&#10;import java.io.FileInputStream;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.concurrent.ExecutionException;&#10;&#10;/**&#10; * FirebaseService - Handles Firebase Authentication and Firestore database operations&#10; *&#10; * INTEROPERABILITY:&#10; * This class demonstrates interoperability with Google's Firebase cloud services:&#10; * - Firebase Authentication: User registration and login via Google's authentication service&#10; * - Cloud Firestore: NoSQL database for storing leaderboard data&#10; * - Communication happens over HTTPS using Firebase Admin SDK&#10; *&#10; * VIRTUAL IDENTITY:&#10; * Users establish a virtual identity by:&#10; * - Registering with email, password, and display name&#10; * - Firebase assigns a unique UID (User ID) to each user&#10; * - This identity is used to personalize the experience and track scores&#10; * - Guest users get a temporary identity (e.g., &quot;Guest4721&quot;)&#10; *&#10; * HIGH COHESION:&#10; * All Firebase-related operations (auth + database) are in this class&#10; * Single responsibility: Manage user identity and persistent data storage&#10; *&#10; * LOW COUPLING:&#10; * Controllers don't need to know Firebase implementation details&#10; * They just call methods like registerUser(), saveScore(), getTopScores()&#10; */&#10;public class FirebaseService {&#10;&#10;    private static FirebaseService instance;&#10;    private FirebaseAuth firebaseAuth;&#10;    private Firestore firestore;&#10;&#10;    private FirebaseService() {&#10;        // Private constructor for singleton&#10;    }&#10;&#10;    public static FirebaseService getInstance() {&#10;        if (instance == null) {&#10;            instance = new FirebaseService();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Initialize Firebase Admin SDK with service account key&#10;     */&#10;    public void initialize() {&#10;        try {&#10;            // Load service account key from secure config directory&#10;            // The credentials file is stored outside of resources to prevent accidental commits&#10;            String credentialsPath = &quot;config/firebase-credentials.json&quot;;&#10;            InputStream serviceAccount = new FileInputStream(credentialsPath);&#10;&#10;            FirebaseOptions options = FirebaseOptions.builder()&#10;                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))&#10;                    .build();&#10;&#10;            // Initialize Firebase App if not already initialized&#10;            if (FirebaseApp.getApps().isEmpty()) {&#10;                FirebaseApp.initializeApp(options);&#10;            }&#10;&#10;            firebaseAuth = FirebaseAuth.getInstance();&#10;            firestore = FirestoreClient.getFirestore();&#10;            System.out.println(&quot;Firebase initialized successfully&quot;);&#10;&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Error initializing Firebase: &quot; + e.getMessage());&#10;            System.err.println(&quot;Stack trace: &quot; + e.getClass().getName());&#10;            System.err.println(&quot;Make sure the firebase-credentials.json file exists in the config/ directory&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Register a new user with Firebase Authentication&#10;     *&#10;     * VIRTUAL IDENTITY:&#10;     * Creates a new virtual identity for the user with:&#10;     * - Unique UID assigned by Firebase&#10;     * - Email and password for authentication&#10;     * - Display name for personalization&#10;     *&#10;     * INTEROPERABILITY:&#10;     * Communicates with Google's Firebase Authentication service over HTTPS&#10;     */&#10;    public UserRecord registerUser(String email, String password, String displayName) {&#10;        if (firebaseAuth == null) {&#10;            System.err.println(&quot;Firebase not initialized&quot;);&#10;            return null;&#10;        }&#10;&#10;        try {&#10;            UserRecord.CreateRequest request = new UserRecord.CreateRequest()&#10;                    .setEmail(email)&#10;                    .setPassword(password)&#10;                    .setDisplayName(displayName)&#10;                    .setEmailVerified(false);&#10;&#10;            UserRecord userRecord = firebaseAuth.createUser(request);&#10;            System.out.println(&quot;Successfully created user: &quot; + userRecord.getUid());&#10;            return userRecord;&#10;&#10;        } catch (FirebaseAuthException e) {&#10;            System.err.println(&quot;Error creating user: &quot; + e.getMessage());&#10;            System.err.println(&quot;Error code: &quot; + e.getAuthErrorCode());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Login user by verifying credentials&#10;     *&#10;     * VIRTUAL IDENTITY:&#10;     * Retrieves the user's virtual identity from Firebase&#10;     */&#10;    public UserRecord loginUser(String email, String password) {&#10;        if (firebaseAuth == null) {&#10;            System.err.println(&quot;Firebase not initialized&quot;);&#10;            return null;&#10;        }&#10;&#10;        try {&#10;            // Get user by email&#10;            UserRecord userRecord = firebaseAuth.getUserByEmail(email);&#10;&#10;            // Note: Firebase Admin SDK doesn't verify passwords directly&#10;            // In production, you would use Firebase Client SDK for authentication&#10;            System.out.println(&quot;User found: &quot; + userRecord.getUid());&#10;            return userRecord;&#10;&#10;        } catch (FirebaseAuthException e) {&#10;            System.err.println(&quot;Error logging in user: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get user by UID&#10;     */&#10;    public UserRecord getUserById(String uid) {&#10;        if (firebaseAuth == null) {&#10;            System.err.println(&quot;Firebase not initialized&quot;);&#10;            return null;&#10;        }&#10;&#10;        try {&#10;            return firebaseAuth.getUser(uid);&#10;        } catch (FirebaseAuthException e) {&#10;            System.err.println(&quot;Error getting user: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Save score to Firestore leaderboard collection&#10;     *&#10;     * INTEROPERABILITY:&#10;     * Stores data in Google's Cloud Firestore (NoSQL database)&#10;     * Data is synchronized across all clients in real-time&#10;     *&#10;     * VIRTUAL IDENTITY:&#10;     * Associates the score with the player's display name (virtual identity)&#10;     */&#10;    public void saveScore(String username, int score) {&#10;        if (firestore == null) {&#10;            System.err.println(&quot;Firestore not initialized&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            Map&lt;String, Object&gt; scoreData = new HashMap&lt;&gt;();&#10;            scoreData.put(&quot;username&quot;, username);&#10;            scoreData.put(&quot;score&quot;, score);&#10;            scoreData.put(&quot;timestamp&quot;, System.currentTimeMillis());&#10;&#10;            // Add document to leaderboard collection&#10;            firestore.collection(&quot;leaderboard&quot;)&#10;                    .add(scoreData)&#10;                    .get(); // Wait for completion&#10;&#10;            System.out.println(&quot;Score saved successfully: &quot; + username + &quot; - &quot; + score);&#10;&#10;        } catch (InterruptedException | ExecutionException e) {&#10;            System.err.println(&quot;Error saving score: &quot; + e.getMessage());&#10;            System.err.println(&quot;Error type: &quot; + e.getClass().getSimpleName());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get top 10 scores from leaderboard, ordered by score descending&#10;     *&#10;     * INTEROPERABILITY:&#10;     * Queries Cloud Firestore database and retrieves data&#10;     */&#10;    public List&lt;LeaderboardEntry&gt; getTopScores() {&#10;        List&lt;LeaderboardEntry&gt; topScores = new ArrayList&lt;&gt;();&#10;&#10;        if (firestore == null) {&#10;            System.err.println(&quot;Firestore not initialized&quot;);&#10;            return topScores;&#10;        }&#10;&#10;        try {&#10;            // Query leaderboard collection, order by score descending, limit to 10&#10;            List&lt;QueryDocumentSnapshot&gt; documents = firestore.collection(&quot;leaderboard&quot;)&#10;                    .orderBy(&quot;score&quot;, Query.Direction.DESCENDING)&#10;                    .limit(10)&#10;                    .get()&#10;                    .get()&#10;                    .getDocuments();&#10;&#10;            // Convert documents to LeaderboardEntry objects&#10;            for (QueryDocumentSnapshot document : documents) {&#10;                String username = document.getString(&quot;username&quot;);&#10;                Long scoreLong = document.getLong(&quot;score&quot;);&#10;                int score = scoreLong != null ? scoreLong.intValue() : 0;&#10;&#10;                topScores.add(new LeaderboardEntry(username, score));&#10;            }&#10;&#10;            System.out.println(&quot;Retrieved &quot; + topScores.size() + &quot; top scores&quot;);&#10;&#10;        } catch (InterruptedException | ExecutionException e) {&#10;            System.err.println(&quot;Error retrieving top scores: &quot; + e.getMessage());&#10;            System.err.println(&quot;Error type: &quot; + e.getClass().getSimpleName());&#10;        }&#10;&#10;        return topScores;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>